{"pagelen": 100, "values": [{"priority": "major", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f4e3de89-d527-44d3-b10f-fde17d644890}ts=c_plus_plus"}}, "type": "repository", "name": "ign-plugin", "full_name": "ignitionrobotics/ign-plugin", "uuid": "{f4e3de89-d527-44d3-b10f-fde17d644890}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/1/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/1.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/1/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/1/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/issues/1/create-first-release"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/1/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Create first release", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We just merged pull request #2, so I think we can make a prerelease. @\\_jrivero_ do you mind helping with the debian metadata? There are 3 components (core, loader, register).\r\n\r\ncc @mxgrey", "markup": "markdown", "html": "<p>We just merged <a href=\"#!/ignitionrobotics/ign-plugin/pull-requests/2/part-3-better-plugin-registration-and\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2</a>, so I think we can make a prerelease. @_jrivero_ do you mind helping with the debian metadata? There are 3 components (core, loader, register).</p>\n<p>cc @mxgrey</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-08-21T05:39:11.928577+00:00", "milestone": null, "updated_on": "2018-08-22T16:10:46.580694+00:00", "type": "issue", "id": 1}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f4e3de89-d527-44d3-b10f-fde17d644890}ts=c_plus_plus"}}, "type": "repository", "name": "ign-plugin", "full_name": "ignitionrobotics/ign-plugin", "uuid": "{f4e3de89-d527-44d3-b10f-fde17d644890}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/2/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/2/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/issues/2/feature-request-ign-tool-support-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/2/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Feature request: ign tool support for introspecting plugin libraries", "component": null, "votes": 1, "watches": 2, "content": {"raw": "# Summary\r\n\r\nIt would be cool if we could add an `ign` command file that would enable introspection of a library file by listing the plugins and interfaces present in that library file.\r\n\r\n~~~\r\nign plugin --info libPlugin.so\r\n~~~\r\n\r\n# Motivation\r\n\r\nIt makes it more convenient for downstream users to inspect the interfaces provided by a given plugin library.\r\n\r\n# Describe alternatives you've considered\r\n\r\nWe could write a c++ executable instead of an `ign` tool command.\r\n\r\n# Additional context\r\n\r\nNone.", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>It would be cool if we could add an <code>ign</code> command file that would enable introspection of a library file by listing the plugins and interfaces present in that library file.</p>\n<div class=\"codehilite\"><pre><span></span>ign plugin --info libPlugin.so\n</pre></div>\n\n\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>It makes it more convenient for downstream users to inspect the interfaces provided by a given plugin library.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>We could write a c++ executable instead of an <code>ign</code> tool command.</p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>None.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-11-16T00:31:10.519439+00:00", "milestone": null, "updated_on": "2018-11-16T00:31:10.519439+00:00", "type": "issue", "id": 2}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f4e3de89-d527-44d3-b10f-fde17d644890}ts=c_plus_plus"}}, "type": "repository", "name": "ign-plugin", "full_name": "ignitionrobotics/ign-plugin", "uuid": "{f4e3de89-d527-44d3-b10f-fde17d644890}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/3/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/3/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/issues/3/loadlibrary-is-a-system-function-on"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/3/vote"}}, "reporter": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "title": "LoadLibrary is a system function on Windows", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Description \r\n\r\nThe function provided by ign-plugin `LoadLibrary` conflicts with a [system macro in Windows](https://docs.microsoft.com/en-us/cpp/build/loadlibrary-and-afxloadlibrary?view=vs-2017).\r\n\r\n# Steps to Reproduce\r\n\r\n1. Include `windows.h` in any file using `LoadLibrary` . i.e.:\r\n```diff\r\ndiff -r 226424193246 test/integration/plugin.cc\r\n--- a/test/integration/plugin.cc        Fri Nov 02 17:58:25 2018 +0000\r\n+++ b/test/integration/plugin.cc        Sat Dec 15 01:45:10 2018 +0100\r\n@@ -30,6 +30,8 @@\r\n\r\n #include \"../plugins/DummyPlugins.hh\"\r\n #include \"utils.hh\"\r\n+#include \"windows.h\"\r\n+\r\n\r\n /////////////////////////////////////////////////\r\n TEST(Loader, LoadBadPlugins)\r\n```\r\n\r\n2. Compile it on Windows. The following error appears:\r\n\r\n```\r\n  c:\\users\\jrivero\\code\\ws_plugin\\src\\ign-plugin\\test\\integration\\plugin.cc(50): error C2039: 'LoadLibraryA': is not a member of 'ignition::plugin::Lo\r\nader' [C:\\Users\\jrivero\\code\\ws_plugin\\build\\ignition-plugin1\\test\\integration\\INTEGRATION_plugin.vcxproj]\r\n```\r\n\r\n**Expected behavior:**  \r\n\r\nNot to call system function but ign-plugin LoadLibrary\r\n\r\n**Actual behavior:**\r\n\r\nCompiler error.\r\n\r\n**Reproduces how often:** \r\n\r\nAlways\r\n\r\n# Versions\r\n\r\nTested on `default` branch\r\n\r\n# Additional Information\r\n\r\nRenaming the function and deprecate LoadLibrary comes to my mind as the easy way but not sure if we can find a better approach to solve it.", "markup": "markdown", "html": "<h1 id=\"markdown-header-description\">Description</h1>\n<p>The function provided by ign-plugin <code>LoadLibrary</code> conflicts with a <a data-is-external-link=\"true\" href=\"https://docs.microsoft.com/en-us/cpp/build/loadlibrary-and-afxloadlibrary?view=vs-2017\" rel=\"nofollow\">system macro in Windows</a>.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<ol>\n<li>Include <code>windows.h</code> in any file using <code>LoadLibrary</code> . i.e.:</li>\n</ol>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 226424193246 test/integration/plugin.cc</span>\n<span class=\"gd\">--- a/test/integration/plugin.cc        Fri Nov 02 17:58:25 2018 +0000</span>\n<span class=\"gi\">+++ b/test/integration/plugin.cc        Sat Dec 15 01:45:10 2018 +0100</span>\n<span class=\"gu\">@@ -30,6 +30,8 @@</span>\n\n #include &quot;../plugins/DummyPlugins.hh&quot;\n #include &quot;utils.hh&quot;\n<span class=\"gi\">+#include &quot;windows.h&quot;</span>\n<span class=\"gi\">+</span>\n\n /////////////////////////////////////////////////\n TEST(Loader, LoadBadPlugins)\n</pre></div>\n\n\n<ol>\n<li>Compile it on Windows. The following error appears:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>  c:\\users\\jrivero\\code\\ws_plugin\\src\\ign-plugin\\test\\integration\\plugin.cc(50): error C2039: &#39;LoadLibraryA&#39;: is not a member of &#39;ignition::plugin::Lo\nader&#39; [C:\\Users\\jrivero\\code\\ws_plugin\\build\\ignition-plugin1\\test\\integration\\INTEGRATION_plugin.vcxproj]\n</pre></div>\n\n\n<p><strong>Expected behavior:</strong>  </p>\n<p>Not to call system function but ign-plugin LoadLibrary</p>\n<p><strong>Actual behavior:</strong></p>\n<p>Compiler error.</p>\n<p><strong>Reproduces how often:</strong> </p>\n<p>Always</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p>Tested on <code>default</code> branch</p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>\n<p>Renaming the function and deprecate LoadLibrary comes to my mind as the easy way but not sure if we can find a better approach to solve it.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-12-15T00:47:39.597150+00:00", "milestone": null, "updated_on": "2020-03-10T00:27:15.684891+00:00", "type": "issue", "id": 3}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f4e3de89-d527-44d3-b10f-fde17d644890}ts=c_plus_plus"}}, "type": "repository", "name": "ign-plugin", "full_name": "ignitionrobotics/ign-plugin", "uuid": "{f4e3de89-d527-44d3-b10f-fde17d644890}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/4/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/4/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/issues/4/plugin-loader-could-offer-the-option-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/4/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Plugin loader could offer the option to load all known plugins", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Migrated from [ignition common issue 15](https://bitbucket.org/ignitionrobotics/ign-common/issues/15).\r\n\r\n---\r\n\r\nThe plugin loader added on [ign-common pull request 27](https://bitbucket.org/ignitionrobotics/ign-common/pull-requests/27/adds-pluginloader) offers, among other things, interfaces to:\r\n\r\n* add paths where to look for plugins\r\n* load a library from a previously added path, given its filename\r\n* list all loaded libraries\r\n\r\nIf one wants to list all the libraries available on the path, one needs to load all of them first. It would be nice if the plugin loader offered a function which automatically loads all libraries found in all registered paths.", "markup": "markdown", "html": "<p>Migrated from <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-common/issues/15\" rel=\"nofollow\">ignition common issue 15</a>.</p>\n<hr />\n<p>The plugin loader added on <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-common/pull-requests/27/adds-pluginloader\" rel=\"nofollow\">ign-common pull request 27</a> offers, among other things, interfaces to:</p>\n<ul>\n<li>add paths where to look for plugins</li>\n<li>load a library from a previously added path, given its filename</li>\n<li>list all loaded libraries</li>\n</ul>\n<p>If one wants to list all the libraries available on the path, one needs to load all of them first. It would be nice if the plugin loader offered a function which automatically loads all libraries found in all registered paths.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-02-26T19:46:37.001303+00:00", "milestone": null, "updated_on": "2019-02-26T20:17:23.941840+00:00", "type": "issue", "id": 4}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f4e3de89-d527-44d3-b10f-fde17d644890}ts=c_plus_plus"}}, "type": "repository", "name": "ign-plugin", "full_name": "ignitionrobotics/ign-plugin", "uuid": "{f4e3de89-d527-44d3-b10f-fde17d644890}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/5/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/5/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/issues/5/provide-name-accessor-for-plugin-class"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/5/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Provide Name accessor for Plugin class", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Migrated from https://bitbucket.org/ignitionrobotics/ign-common/issues/32/provide-name-accessor-for-plugin-class\r\n\r\nThe name of a plugin is stored within the [Info struct](#!/ignitionrobotics/ign-plugin/src/8f724376b94bf6e298a7d66a37e5e5a68a329409/core/include/ignition/plugin/Info.hh?at=default&fileviewer=file-view-default#Info.hh-51:58), but the [Plugin class](#!/ignitionrobotics/ign-plugin/src/8f724376b94bf6e298a7d66a37e5e5a68a329409/core/include/ignition/plugin/Plugin.hh?at=default&fileviewer=file-view-default) doesn't yet have an accessor for the name. It should be easy to add it.", "markup": "markdown", "html": "<p>Migrated from <a href=\"https://bitbucket.org/ignitionrobotics/ign-common/issues/32/provide-name-accessor-for-plugin-class\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/ignitionrobotics/ign-common/issues/32/provide-name-accessor-for-plugin-class</a></p>\n<p>The name of a plugin is stored within the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-plugin/src/8f724376b94bf6e298a7d66a37e5e5a68a329409/core/include/ignition/plugin/Info.hh?at=default&amp;fileviewer=file-view-default#Info.hh-51:58\" rel=\"nofollow\">Info struct</a>, but the <a data-is-external-link=\"true\" href=\"#!/ignitionrobotics/ign-plugin/src/8f724376b94bf6e298a7d66a37e5e5a68a329409/core/include/ignition/plugin/Plugin.hh?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">Plugin class</a> doesn't yet have an accessor for the name. It should be easy to add it.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-04-23T07:28:10.386146+00:00", "milestone": null, "updated_on": "2019-04-23T07:28:10.386146+00:00", "type": "issue", "id": 5}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f4e3de89-d527-44d3-b10f-fde17d644890}ts=c_plus_plus"}}, "type": "repository", "name": "ign-plugin", "full_name": "ignitionrobotics/ign-plugin", "uuid": "{f4e3de89-d527-44d3-b10f-fde17d644890}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/6/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/6/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/issues/6/rtld_lazy-vs-rtld_now-in-pluginloader"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/6/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "RTLD_LAZY vs RTLD_NOW in PluginLoader", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Migrated from https://bitbucket.org/ignitionrobotics/ign-common/issues/34/rtld_lazy-vs-rtld_now-in-pluginloader\r\n\r\nLooking at the `PluginLoader` implementation, we're using the `RTLD_LAZY` as the flag parameter when calling `dlopen`.  [Here's](http://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html) a description of the available flags.\r\n\r\nBased on the documentation and a chat with @mxgrey, we conclude that Ignition Common doesn't have a particular preference between `RTLD_LAZY` or `RTLD_NOW`. The main implications seem to affect performance. `RTLD_NOW` front-loads some of the work when `dlopen()` is called at the cost of resolving symbols that might not be used. On the other hand, `RTLD_LAZY` returns faster from `dlopen()` but it will require to resolve the symbol the first time is really used.\r\n\r\nTo accommodate the different use cases from the Ignition Common users, we could expose the ability to choose the mode to the users. We discussed two options:\r\n\r\n* Expose the flag at the `PluginLoader` class. All subsequent calls to `LoadLibrary()` will use the previously set flag.\r\n* Expose the flag as a new `LoadLibrary()` parameter (possibly with a default option).", "markup": "markdown", "html": "<p>Migrated from <a href=\"https://bitbucket.org/ignitionrobotics/ign-common/issues/34/rtld_lazy-vs-rtld_now-in-pluginloader\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/ignitionrobotics/ign-common/issues/34/rtld_lazy-vs-rtld_now-in-pluginloader</a></p>\n<p>Looking at the <code>PluginLoader</code> implementation, we're using the <code>RTLD_LAZY</code> as the flag parameter when calling <code>dlopen</code>.  <a data-is-external-link=\"true\" href=\"http://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html\" rel=\"nofollow\">Here's</a> a description of the available flags.</p>\n<p>Based on the documentation and a chat with @mxgrey, we conclude that Ignition Common doesn't have a particular preference between <code>RTLD_LAZY</code> or <code>RTLD_NOW</code>. The main implications seem to affect performance. <code>RTLD_NOW</code> front-loads some of the work when <code>dlopen()</code> is called at the cost of resolving symbols that might not be used. On the other hand, <code>RTLD_LAZY</code> returns faster from <code>dlopen()</code> but it will require to resolve the symbol the first time is really used.</p>\n<p>To accommodate the different use cases from the Ignition Common users, we could expose the ability to choose the mode to the users. We discussed two options:</p>\n<ul>\n<li>Expose the flag at the <code>PluginLoader</code> class. All subsequent calls to <code>LoadLibrary()</code> will use the previously set flag.</li>\n<li>Expose the flag as a new <code>LoadLibrary()</code> parameter (possibly with a default option).</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-04-23T07:37:45.703952+00:00", "milestone": null, "updated_on": "2019-04-23T08:05:12.092253+00:00", "type": "issue", "id": 6}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f4e3de89-d527-44d3-b10f-fde17d644890}ts=c_plus_plus"}}, "type": "repository", "name": "ign-plugin", "full_name": "ignitionrobotics/ign-plugin", "uuid": "{f4e3de89-d527-44d3-b10f-fde17d644890}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/7/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/7/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/issues/7/integration_weakpluginptr-test-fails"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/7/vote"}}, "reporter": {"display_name": "Juan Oxoby", "uuid": "{7d3743fc-bfd8-4e48-a53b-9cc0a264f66d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7d3743fc-bfd8-4e48-a53b-9cc0a264f66d%7D"}, "html": {"href": "https://bitbucket.org/%7B7d3743fc-bfd8-4e48-a53b-9cc0a264f66d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/3d4b2394d4fc0cf52ce2d5d797d60b25d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJO-0.png"}}, "nickname": "Juan Oxoby", "type": "user", "account_id": "5e544adb96f7d50ca05430ce"}, "title": "INTEGRATION_WeakPluginPtr test fails", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* \\[X \\] Put an X between the brackets on this line if you have done all of the following:\r\n\r\n    * Checked the Q&A board for common solutions: [http://answers.gazebosim.org](http://answers.gazebosim.org)\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: [https://ignitionrobotics.org/libs](https://ignitionrobotics.org/libs)\r\n    \r\n\r\n# Description\r\n\r\n`INTEGRATION_WeakPluginPtr` is failing on my machine.\r\n\r\n# Steps to Reproduce\r\n\r\n1. Run `INTEGRATION_WeakPluginPtr`\r\n\r\n**Expected behavior:**\r\n\r\nPASSED\r\n\r\n**Actual behavior:**\r\n\r\n```\r\n[==========] Running 2 tests from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 2 tests from WeakPluginPtr\r\n[ RUN      ] WeakPluginPtr.Lifecycle\r\n/home/juan/ignition_workspace/src/ign-plugin/test/integration/WeakPluginPtr.cc:59: Failure\r\nExpected equality of these values:\r\n  nullptr\r\n    Which is: NULL\r\n  dlHandle\r\n    Which is: 0x55fdb805a330\r\n[  FAILED  ] WeakPluginPtr.Lifecycle (0 ms)\r\n[ RUN      ] WeakPluginPtr.CopyMove\r\n[       OK ] WeakPluginPtr.CopyMove (0 ms)\r\n[----------] 2 tests from WeakPluginPtr (0 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 2 tests from 1 test case ran. (0 ms total)\r\n[  PASSED  ] 1 test.\r\n[  FAILED  ] 1 test, listed below:\r\n[  FAILED  ] WeakPluginPtr.Lifecycle\r\n```\r\n\r\n**Reproduces how often:**\r\n\r\nAlways\r\n\r\n# Versions\r\n\r\n```\r\n$ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.3 LTS\r\nRelease:    18.04\r\nCodename:   bionic\r\n\r\n$ gcc --version\r\ngcc (Ubuntu 8.3.0-6ubuntu1~18.04.1) 8.3.0\r\nCopyright (C) 2018 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\n# Additional Information\r\n\r\nThe error points to the macro `CHECK_FOR_LIBRARY` defined on `integration/utils.hh`\r\n\r\nThere\u2019s a comment there saying:\r\n\r\n> /////////////////////////////////////////////////  \r\n> // Note \\(MXG\\): According to some online discussions, there is no guarantee  \r\n> // that a correct number of calls to dlclose\\(void\\*\\) will actually unload the  \r\n> // shared library. In fact, there is no guarantee that a dynamically loaded  \r\n> // library from dlopen will ever be unloaded until the program is terminated.  \r\n> // This may cause dlopen\\(~, RTLD\\_NOLOAD\\) to return a non-null handle even if  \r\n> // we are managing the handles correctly. If the test for  \r\n> // EXPECT\\_EQ\\(nullptr, dlHandle\\) is found to fail occasionally, we should  \r\n> // consider removing it because it may be unreliable. At the very least, if  \r\n> // it fails very infrequently, then we can safely consider the failures to be  \r\n> // false negatives and may want to consider relaxing this test.\r\n\r\nAvoiding the check `EXPECT_EQ(nullptr, dlHandle)` in the macro `CHECK_FOR_LIBRARY` makes the test pass.", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>\n<p>[X ] Put an X between the brackets on this line if you have done all of the following:</p>\n<ul>\n<li>Checked the Q&amp;A board for common solutions: <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org\" rel=\"nofollow\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a data-is-external-link=\"true\" href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p><code>INTEGRATION_WeakPluginPtr</code> is failing on my machine.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<ol>\n<li>Run <code>INTEGRATION_WeakPluginPtr</code></li>\n</ol>\n<p><strong>Expected behavior:</strong></p>\n<p>PASSED</p>\n<p><strong>Actual behavior:</strong></p>\n<div class=\"codehilite\"><pre><span></span>[==========] Running 2 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 2 tests from WeakPluginPtr\n[ RUN      ] WeakPluginPtr.Lifecycle\n/home/juan/ignition_workspace/src/ign-plugin/test/integration/WeakPluginPtr.cc:59: Failure\nExpected equality of these values:\n  nullptr\n    Which is: NULL\n  dlHandle\n    Which is: 0x55fdb805a330\n[  FAILED  ] WeakPluginPtr.Lifecycle (0 ms)\n[ RUN      ] WeakPluginPtr.CopyMove\n[       OK ] WeakPluginPtr.CopyMove (0 ms)\n[----------] 2 tests from WeakPluginPtr (0 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test case ran. (0 ms total)\n[  PASSED  ] 1 test.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] WeakPluginPtr.Lifecycle\n</pre></div>\n\n\n<p><strong>Reproduces how often:</strong></p>\n<p>Always</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<div class=\"codehilite\"><pre><span></span>$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu <span class=\"m\">18</span>.04.3 LTS\nRelease:    <span class=\"m\">18</span>.04\nCodename:   bionic\n\n$ gcc --version\ngcc <span class=\"o\">(</span>Ubuntu <span class=\"m\">8</span>.3.0-6ubuntu1~18.04.1<span class=\"o\">)</span> <span class=\"m\">8</span>.3.0\nCopyright <span class=\"o\">(</span>C<span class=\"o\">)</span> <span class=\"m\">2018</span> Free Software Foundation, Inc.\nThis is free software<span class=\"p\">;</span> see the <span class=\"nb\">source</span> <span class=\"k\">for</span> copying conditions.  There is NO\nwarranty<span class=\"p\">;</span> not even <span class=\"k\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</pre></div>\n\n\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>\n<p>The error points to the macro <code>CHECK_FOR_LIBRARY</code> defined on <code>integration/utils.hh</code></p>\n<p>There\u2019s a comment there saying:</p>\n<blockquote>\n<p>/////////////////////////////////////////////////<br />\n// Note (MXG): According to some online discussions, there is no guarantee<br />\n// that a correct number of calls to dlclose(void*) will actually unload the<br />\n// shared library. In fact, there is no guarantee that a dynamically loaded<br />\n// library from dlopen will ever be unloaded until the program is terminated.<br />\n// This may cause dlopen(~, RTLD_NOLOAD) to return a non-null handle even if<br />\n// we are managing the handles correctly. If the test for<br />\n// EXPECT_EQ(nullptr, dlHandle) is found to fail occasionally, we should<br />\n// consider removing it because it may be unreliable. At the very least, if<br />\n// it fails very infrequently, then we can safely consider the failures to be<br />\n// false negatives and may want to consider relaxing this test.</p>\n</blockquote>\n<p>Avoiding the check <code>EXPECT_EQ(nullptr, dlHandle)</code> in the macro <code>CHECK_FOR_LIBRARY</code> makes the test pass.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-03-30T19:43:28.825962+00:00", "milestone": null, "updated_on": "2020-03-30T19:56:49.887536+00:00", "type": "issue", "id": 7}], "page": 1, "size": 7}