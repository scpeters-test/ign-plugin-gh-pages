{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f4e3de89-d527-44d3-b10f-fde17d644890}ts=c_plus_plus"}}, "type": "repository", "name": "ign-plugin", "full_name": "ignitionrobotics/ign-plugin", "uuid": "{f4e3de89-d527-44d3-b10f-fde17d644890}"}, "links": {"attachments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/7/watch"}, "comments": {"href": "data/repositories/ignitionrobotics/ign-plugin/issues/7/comments_page=1.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/issues/7/integration_weakpluginptr-test-fails"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/issues/7/vote"}}, "reporter": {"display_name": "Juan Oxoby", "uuid": "{7d3743fc-bfd8-4e48-a53b-9cc0a264f66d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7d3743fc-bfd8-4e48-a53b-9cc0a264f66d%7D"}, "html": {"href": "https://bitbucket.org/%7B7d3743fc-bfd8-4e48-a53b-9cc0a264f66d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/3d4b2394d4fc0cf52ce2d5d797d60b25d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJO-0.png"}}, "nickname": "Juan Oxoby", "type": "user", "account_id": "5e544adb96f7d50ca05430ce"}, "title": "INTEGRATION_WeakPluginPtr test fails", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* \\[X \\] Put an X between the brackets on this line if you have done all of the following:\r\n\r\n    * Checked the Q&A board for common solutions: [http://answers.gazebosim.org](http://answers.gazebosim.org)\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: [https://ignitionrobotics.org/libs](https://ignitionrobotics.org/libs)\r\n    \r\n\r\n# Description\r\n\r\n`INTEGRATION_WeakPluginPtr` is failing on my machine.\r\n\r\n# Steps to Reproduce\r\n\r\n1. Run `INTEGRATION_WeakPluginPtr`\r\n\r\n**Expected behavior:**\r\n\r\nPASSED\r\n\r\n**Actual behavior:**\r\n\r\n```\r\n[==========] Running 2 tests from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 2 tests from WeakPluginPtr\r\n[ RUN      ] WeakPluginPtr.Lifecycle\r\n/home/juan/ignition_workspace/src/ign-plugin/test/integration/WeakPluginPtr.cc:59: Failure\r\nExpected equality of these values:\r\n  nullptr\r\n    Which is: NULL\r\n  dlHandle\r\n    Which is: 0x55fdb805a330\r\n[  FAILED  ] WeakPluginPtr.Lifecycle (0 ms)\r\n[ RUN      ] WeakPluginPtr.CopyMove\r\n[       OK ] WeakPluginPtr.CopyMove (0 ms)\r\n[----------] 2 tests from WeakPluginPtr (0 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 2 tests from 1 test case ran. (0 ms total)\r\n[  PASSED  ] 1 test.\r\n[  FAILED  ] 1 test, listed below:\r\n[  FAILED  ] WeakPluginPtr.Lifecycle\r\n```\r\n\r\n**Reproduces how often:**\r\n\r\nAlways\r\n\r\n# Versions\r\n\r\n```\r\n$ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.3 LTS\r\nRelease:    18.04\r\nCodename:   bionic\r\n\r\n$ gcc --version\r\ngcc (Ubuntu 8.3.0-6ubuntu1~18.04.1) 8.3.0\r\nCopyright (C) 2018 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```\r\n\r\n# Additional Information\r\n\r\nThe error points to the macro `CHECK_FOR_LIBRARY` defined on `integration/utils.hh`\r\n\r\nThere\u2019s a comment there saying:\r\n\r\n> /////////////////////////////////////////////////  \r\n> // Note \\(MXG\\): According to some online discussions, there is no guarantee  \r\n> // that a correct number of calls to dlclose\\(void\\*\\) will actually unload the  \r\n> // shared library. In fact, there is no guarantee that a dynamically loaded  \r\n> // library from dlopen will ever be unloaded until the program is terminated.  \r\n> // This may cause dlopen\\(~, RTLD\\_NOLOAD\\) to return a non-null handle even if  \r\n> // we are managing the handles correctly. If the test for  \r\n> // EXPECT\\_EQ\\(nullptr, dlHandle\\) is found to fail occasionally, we should  \r\n> // consider removing it because it may be unreliable. At the very least, if  \r\n> // it fails very infrequently, then we can safely consider the failures to be  \r\n> // false negatives and may want to consider relaxing this test.\r\n\r\nAvoiding the check `EXPECT_EQ(nullptr, dlHandle)` in the macro `CHECK_FOR_LIBRARY` makes the test pass.", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>\n<p>[X ] Put an X between the brackets on this line if you have done all of the following:</p>\n<ul>\n<li>Checked the Q&amp;A board for common solutions: <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org\" rel=\"nofollow\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a data-is-external-link=\"true\" href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p><code>INTEGRATION_WeakPluginPtr</code> is failing on my machine.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<ol>\n<li>Run <code>INTEGRATION_WeakPluginPtr</code></li>\n</ol>\n<p><strong>Expected behavior:</strong></p>\n<p>PASSED</p>\n<p><strong>Actual behavior:</strong></p>\n<div class=\"codehilite\"><pre><span></span>[==========] Running 2 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 2 tests from WeakPluginPtr\n[ RUN      ] WeakPluginPtr.Lifecycle\n/home/juan/ignition_workspace/src/ign-plugin/test/integration/WeakPluginPtr.cc:59: Failure\nExpected equality of these values:\n  nullptr\n    Which is: NULL\n  dlHandle\n    Which is: 0x55fdb805a330\n[  FAILED  ] WeakPluginPtr.Lifecycle (0 ms)\n[ RUN      ] WeakPluginPtr.CopyMove\n[       OK ] WeakPluginPtr.CopyMove (0 ms)\n[----------] 2 tests from WeakPluginPtr (0 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test case ran. (0 ms total)\n[  PASSED  ] 1 test.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] WeakPluginPtr.Lifecycle\n</pre></div>\n\n\n<p><strong>Reproduces how often:</strong></p>\n<p>Always</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<div class=\"codehilite\"><pre><span></span>$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu <span class=\"m\">18</span>.04.3 LTS\nRelease:    <span class=\"m\">18</span>.04\nCodename:   bionic\n\n$ gcc --version\ngcc <span class=\"o\">(</span>Ubuntu <span class=\"m\">8</span>.3.0-6ubuntu1~18.04.1<span class=\"o\">)</span> <span class=\"m\">8</span>.3.0\nCopyright <span class=\"o\">(</span>C<span class=\"o\">)</span> <span class=\"m\">2018</span> Free Software Foundation, Inc.\nThis is free software<span class=\"p\">;</span> see the <span class=\"nb\">source</span> <span class=\"k\">for</span> copying conditions.  There is NO\nwarranty<span class=\"p\">;</span> not even <span class=\"k\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</pre></div>\n\n\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>\n<p>The error points to the macro <code>CHECK_FOR_LIBRARY</code> defined on <code>integration/utils.hh</code></p>\n<p>There\u2019s a comment there saying:</p>\n<blockquote>\n<p>/////////////////////////////////////////////////<br />\n// Note (MXG): According to some online discussions, there is no guarantee<br />\n// that a correct number of calls to dlclose(void*) will actually unload the<br />\n// shared library. In fact, there is no guarantee that a dynamically loaded<br />\n// library from dlopen will ever be unloaded until the program is terminated.<br />\n// This may cause dlopen(~, RTLD_NOLOAD) to return a non-null handle even if<br />\n// we are managing the handles correctly. If the test for<br />\n// EXPECT_EQ(nullptr, dlHandle) is found to fail occasionally, we should<br />\n// consider removing it because it may be unreliable. At the very least, if<br />\n// it fails very infrequently, then we can safely consider the failures to be<br />\n// false negatives and may want to consider relaxing this test.</p>\n</blockquote>\n<p>Avoiding the check <code>EXPECT_EQ(nullptr, dlHandle)</code> in the macro <code>CHECK_FOR_LIBRARY</code> makes the test pass.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-03-30T19:43:28.825962+00:00", "milestone": null, "updated_on": "2020-03-30T19:56:49.887536+00:00", "type": "issue", "id": 7}