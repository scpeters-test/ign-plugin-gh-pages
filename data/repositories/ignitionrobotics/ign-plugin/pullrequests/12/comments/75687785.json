{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/12/comments/75687785.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/diff/ignitionrobotics/ign-plugin:5a20698d52a2..e743be809b2c?path=loader%2Finclude%2Fignition%2Fplugin%2FLoader.hh"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/12/_/diff#comment-75687785"}}, "parent": {"id": 75685604, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/12/comments/75685604.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/12/_/diff#comment-75685604"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 12, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/12.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/12"}}, "title": "Plugin Enhancements Part 3: Factory"}, "content": {"raw": "Yeah, when I originally designed the feature, I had intended to make a function called `Loader::Factory(std::string)` that would give the user the ability to call a function `->Construct(Args&&...)`.\n\nIn the process of implementing it, I realized that the most sensible way of implementing this feature would have the side-effect of enabling users to instantiate a `std::shared_ptr<Interface>` to the interface of any kind of plugin, not just factories.\n\nI decided to just roll with it, since it doesn\u2019t really hurt anything, and it might be useful for other cases.\n\nI'd be totally open to renaming the `Loader::Factory` function, but I'd like a name that emphasizes that it's the recommended function for reaching the `Factory<T, Args...>::Construct(Args&&...)` API.", "markup": "markdown", "html": "<p>Yeah, when I originally designed the feature, I had intended to make a function called <code>Loader::Factory(std::string)</code> that would give the user the ability to call a function <code>-&gt;Construct(Args&amp;&amp;...)</code>.</p>\n<p>In the process of implementing it, I realized that the most sensible way of implementing this feature would have the side-effect of enabling users to instantiate a <code>std::shared_ptr&lt;Interface&gt;</code> to the interface of any kind of plugin, not just factories.</p>\n<p>I decided to just roll with it, since it doesn\u2019t really hurt anything, and it might be useful for other cases.</p>\n<p>I'd be totally open to renaming the <code>Loader::Factory</code> function, but I'd like a name that emphasizes that it's the recommended function for reaching the <code>Factory&lt;T, Args...&gt;::Construct(Args&amp;&amp;...)</code> API.</p>", "type": "rendered"}, "created_on": "2018-09-12T02:21:07.503128+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "loader/include/ignition/plugin/Loader.hh"}, "updated_on": "2018-09-12T02:21:07.509029+00:00", "type": "pullrequest_comment", "id": 75687785}