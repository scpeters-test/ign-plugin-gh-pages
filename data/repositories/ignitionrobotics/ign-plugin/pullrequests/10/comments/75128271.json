{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10/comments/75128271.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/diff/ignitionrobotics/ign-plugin:50d0e9abb3f8..4f03ef01823a?path=core%2Finclude%2Fignition%2Fplugin%2FPlugin.hh"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10/_/diff#comment-75128271"}}, "parent": {"id": 75087469, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10/comments/75087469.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10/_/diff#comment-75087469"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10"}}, "title": "Plugin Enhancements Part 1: EnablePluginFromThis"}, "content": {"raw": "Passing the `std::shared_ptr` by reference is definitely intentional, although I know some developers follow different policies.\n\nSpecifically, some developers will have a function take a `const std::shared_ptr<T>&` argument if and only if the function does not alter the reference count of the `shared_ptr` \\(i.e. if the `shared_ptr` is only being viewed by the function and not copied\\). Then if the `shared_ptr` does get copied, they'll take a `std::shared_ptr<T>` argument by value instead of by reference to communicate to the user that the function will be altering the reference count on the `shared_ptr`. The catch with this approach is that you need to remember to use `std::move(~)` inside the function when getting a copy of the `shared_ptr`, otherwise you\u2019ll be doing extra copying and extra reference count incrementations.\n\nMy personal view is that whether or not a function alters the reference count of a `std::shared_ptr` that you pass to it is an unimportant implementation detail. The type of `std::shared_ptr` already communicates that you should expect it to be a shared resource, and that you shouldn\u2019t expect to be able to personally track its exact ownership anyway. So I\u2019d rather pass by reference whenever possible to avoid unnecessary copy overhead.\n\nI'm okay with the pass-by-value-when-copying semantics if anyone has a strong preference for that; it just means we need to be more conscientious of how we manage `shared_ptr` objects whenever we create an API.", "markup": "markdown", "html": "<p>Passing the <code>std::shared_ptr</code> by reference is definitely intentional, although I know some developers follow different policies.</p>\n<p>Specifically, some developers will have a function take a <code>const std::shared_ptr&lt;T&gt;&amp;</code> argument if and only if the function does not alter the reference count of the <code>shared_ptr</code> (i.e. if the <code>shared_ptr</code> is only being viewed by the function and not copied). Then if the <code>shared_ptr</code> does get copied, they'll take a <code>std::shared_ptr&lt;T&gt;</code> argument by value instead of by reference to communicate to the user that the function will be altering the reference count on the <code>shared_ptr</code>. The catch with this approach is that you need to remember to use <code>std::move(~)</code> inside the function when getting a copy of the <code>shared_ptr</code>, otherwise you\u2019ll be doing extra copying and extra reference count incrementations.</p>\n<p>My personal view is that whether or not a function alters the reference count of a <code>std::shared_ptr</code> that you pass to it is an unimportant implementation detail. The type of <code>std::shared_ptr</code> already communicates that you should expect it to be a shared resource, and that you shouldn\u2019t expect to be able to personally track its exact ownership anyway. So I\u2019d rather pass by reference whenever possible to avoid unnecessary copy overhead.</p>\n<p>I'm okay with the pass-by-value-when-copying semantics if anyone has a strong preference for that; it just means we need to be more conscientious of how we manage <code>shared_ptr</code> objects whenever we create an API.</p>", "type": "rendered"}, "created_on": "2018-09-06T03:37:47.504626+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": false, "path": "core/include/ignition/plugin/Plugin.hh"}, "updated_on": "2018-09-06T03:37:47.510977+00:00", "type": "pullrequest_comment", "id": 75128271}