{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10/comments/75266321.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/diff/ignitionrobotics/ign-plugin:50d0e9abb3f8..4f03ef01823a?path=core%2Finclude%2Fignition%2Fplugin%2FPlugin.hh"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10/_/diff#comment-75266321"}}, "parent": {"id": 75210199, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10/comments/75210199.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10/_/diff#comment-75210199"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10"}}, "title": "Plugin Enhancements Part 1: EnablePluginFromThis"}, "content": {"raw": "Just to elaborate a little more: It's always safe to pass a `std::shared_ptr` argument by reference, because calling a function will add another layer on top of the stack while the `std::shared_ptr` that gets passed to the new layer must exist somewhere on a lower layer. As long as the new layer is still on the stack, it's impossible for the `std::shared_ptr` that was passed to it to be deleted \\(unless it's a `std::shared_ptr` that has been allocated on the heap like a `std::unique_ptr<std::shared_ptr<T>>`, and then you force it to be deleted it from inside the function call or from another thread, but we\u2019re obviously not doing any of that here\\).\n\nThere's a little bit more risk with returning a `std::shared_ptr` by reference, because someone could hypothetically choose to receive it by reference, e.g. `const ConstInfoPtr &infoReference = plugin->PrivateGetInfoPtr()` then if `plugin` gets deleted while `infoReference` is still alive, you'll have undefined behavior if you use `infoReference`. But that's an issue any time a user chooses to bind a reference to a member variable of an instance and then deletes that instance.\n\nShort version: Someone would have to intentionally try really hard to break this, which is about as safe as the C\\+\\+ language can get.", "markup": "markdown", "html": "<p>Just to elaborate a little more: It's always safe to pass a <code>std::shared_ptr</code> argument by reference, because calling a function will add another layer on top of the stack while the <code>std::shared_ptr</code> that gets passed to the new layer must exist somewhere on a lower layer. As long as the new layer is still on the stack, it's impossible for the <code>std::shared_ptr</code> that was passed to it to be deleted (unless it's a <code>std::shared_ptr</code> that has been allocated on the heap like a <code>std::unique_ptr&lt;std::shared_ptr&lt;T&gt;&gt;</code>, and then you force it to be deleted it from inside the function call or from another thread, but we\u2019re obviously not doing any of that here).</p>\n<p>There's a little bit more risk with returning a <code>std::shared_ptr</code> by reference, because someone could hypothetically choose to receive it by reference, e.g. <code>const ConstInfoPtr &amp;infoReference = plugin-&gt;PrivateGetInfoPtr()</code> then if <code>plugin</code> gets deleted while <code>infoReference</code> is still alive, you'll have undefined behavior if you use <code>infoReference</code>. But that's an issue any time a user chooses to bind a reference to a member variable of an instance and then deletes that instance.</p>\n<p>Short version: Someone would have to intentionally try really hard to break this, which is about as safe as the C++ language can get.</p>", "type": "rendered"}, "created_on": "2018-09-07T02:07:33.403065+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": false, "path": "core/include/ignition/plugin/Plugin.hh"}, "updated_on": "2018-09-07T02:07:33.409214+00:00", "type": "pullrequest_comment", "id": 75266321}