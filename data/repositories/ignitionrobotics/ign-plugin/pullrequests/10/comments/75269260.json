{"links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10/comments/75269260.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/ignitionrobotics/ign-plugin/diff/ignitionrobotics/ign-plugin:50d0e9abb3f8..4f03ef01823a?path=core%2Finclude%2Fignition%2Fplugin%2FPlugin.hh"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10/_/diff#comment-75269260"}}, "parent": {"id": 75268738, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10/comments/75268738.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10/_/diff#comment-75268738"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/ignitionrobotics/ign-plugin/pullrequests/10.json"}, "html": {"href": "#!/ignitionrobotics/ign-plugin/pull-requests/10"}}, "title": "Plugin Enhancements Part 1: EnablePluginFromThis"}, "content": {"raw": "You'd have to try pretty hard to set up this scenario. The callback which spins up the new thread would have to take in a `std::shared_ptr` argument by reference _and_ the calling thread would have to explicitly detach the `std::thread` object _and_ the `std::shared_ptr` that was passed from the calling thread would have to expire in order to trigger an issue here. At that point I would place the fault on whoever set up that threading, because one of the most important considerations when creating a `std::thread` callback is to ensure that either \\(1\\) all data you pass to the callback has been copied to the new thread, or \\(2\\) if you pass any references, those references will not expire before the thread execution is complete and the references are thread-safe or protected by a mutex.", "markup": "markdown", "html": "<p>You'd have to try pretty hard to set up this scenario. The callback which spins up the new thread would have to take in a <code>std::shared_ptr</code> argument by reference <em>and</em> the calling thread would have to explicitly detach the <code>std::thread</code> object <em>and</em> the <code>std::shared_ptr</code> that was passed from the calling thread would have to expire in order to trigger an issue here. At that point I would place the fault on whoever set up that threading, because one of the most important considerations when creating a <code>std::thread</code> callback is to ensure that either (1) all data you pass to the callback has been copied to the new thread, or (2) if you pass any references, those references will not expire before the thread execution is complete and the references are thread-safe or protected by a mutex.</p>", "type": "rendered"}, "created_on": "2018-09-07T03:38:32.358171+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": false, "path": "core/include/ignition/plugin/Plugin.hh"}, "updated_on": "2018-09-07T03:38:32.366018+00:00", "type": "pullrequest_comment", "id": 75269260}